generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["omitApi"]
}


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  LANDLORD
}

enum PropertyStatus {
  DRAFT
  PENDING
  ACTIVE
  RENTED
  ARCHIVED
  REJECTED
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String
  phone        String?
  address      String?
  type         UserType

  sessions   Session[]
  properties Property[]
  chatParticipants ChatParticipant[] 
  messages         Message[]         
}

model Session {
  id        String   @id
  expiresAt DateTime

  user   User @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId Int
}

model Property {
  id             Int             @id @default(autoincrement())
  title          String          @db.Text()
  description    String          @db.Text()
  postcode       String
  longitude      Float
  latitude       Float
  totalRent      Decimal
  numberOfRooms  Int
  petsAllowed    Boolean         @default(false)
  smokingAllowed Boolean         @default(false)
  availableFrom  DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  media          PropertyMedia[]
  status         PropertyStatus  @default(PENDING)

  landlordId Int
  landlord   User @relation(fields: [landlordId], references: [id])

  chats         Chat[]  
}

model PropertyMedia {
  id         Int      @id @default(autoincrement())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Chat {
  id             Int             @id @default(autoincrement())
  propertyId     Int
  lastMessageAt  DateTime

  property       Property        @relation(fields: [propertyId], references: [id])

  participants   ChatParticipant[] 
  messages       Message[]
}


model ChatParticipant {
  chatid         Int
  userid         Int

  chat           Chat            @relation(fields: [chatid], references: [id])
  user           User            @relation(fields: [userid], references: [id])

  @@unique([chatid, userid]) 
}

model Message {
  id             Int             @id @default(autoincrement())
  chatid         Int
  userid         Int
  content        String          
  createdAt      DateTime        @default(now())
  
  chat           Chat            @relation(fields: [chatid], references: [id])
  user           User            @relation(fields: [userid], references: [id])
}